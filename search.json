[{"title":"每天一个Linux命令--du","url":"https://1314cc.github.io/2017/03/01/everyday-linux-3/","content":"<h1 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h1><ul>\n<li><p><code>du</code><br>显示当前目录的所有文件以及所有子目录的文件大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">cc@MyLinux:~/vundle$ du</div><div class=\"line\">8\t./test/files</div><div class=\"line\">20\t./test</div><div class=\"line\">8\t./.git/refs/heads</div><div class=\"line\">4\t./.git/refs/tags</div><div class=\"line\">8\t./.git/refs/remotes/origin</div><div class=\"line\">12\t./.git/refs/remotes</div><div class=\"line\">28\t./.git/refs</div><div class=\"line\">8\t./.git/info</div><div class=\"line\">4\t./.git/branches</div><div class=\"line\">44\t./.git/hooks</div><div class=\"line\">8\t./.git/logs/refs/heads</div><div class=\"line\">8\t./.git/logs/refs/remotes/origin</div><div class=\"line\">12\t./.git/logs/refs/remotes</div><div class=\"line\">24\t./.git/logs/refs</div><div class=\"line\">32\t./.git/logs</div><div class=\"line\">4\t./.git/objects/info</div><div class=\"line\">1020\t./.git/objects/pack</div><div class=\"line\">1028\t./.git/objects</div><div class=\"line\">1168\t./.git</div><div class=\"line\">8\t./syntax</div><div class=\"line\">48\t./autoload/vundle</div><div class=\"line\">56\t./autoload</div><div class=\"line\">8\t./ftplugin</div><div class=\"line\">20\t./doc</div><div class=\"line\">1328\t.</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>du -h</code><br>以人类的角度直观的显示当前目录或指定目录/文件的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">cc@MyLinux:~/vundle$ du -h</div><div class=\"line\">8.0K\t./test/files</div><div class=\"line\">20K\t./test</div><div class=\"line\">8.0K\t./.git/refs/heads</div><div class=\"line\">4.0K\t./.git/refs/tags</div><div class=\"line\">8.0K\t./.git/refs/remotes/origin</div><div class=\"line\">12K\t./.git/refs/remotes</div><div class=\"line\">28K\t./.git/refs</div><div class=\"line\">8.0K\t./.git/info</div><div class=\"line\">4.0K\t./.git/branches</div><div class=\"line\">44K\t./.git/hooks</div><div class=\"line\">8.0K\t./.git/logs/refs/heads</div><div class=\"line\">8.0K\t./.git/logs/refs/remotes/origin</div><div class=\"line\">12K\t./.git/logs/refs/remotes</div><div class=\"line\">24K\t./.git/logs/refs</div><div class=\"line\">32K\t./.git/logs</div><div class=\"line\">4.0K\t./.git/objects/info</div><div class=\"line\">1020K\t./.git/objects/pack</div><div class=\"line\">1.1M\t./.git/objects</div><div class=\"line\">1.2M\t./.git</div><div class=\"line\">8.0K\t./syntax</div><div class=\"line\">48K\t./autoload/vundle</div><div class=\"line\">56K\t./autoload</div><div class=\"line\">8.0K\t./ftplugin</div><div class=\"line\">20K\t./doc</div><div class=\"line\">1.3M\t.</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>du -s</code><br>显示总共大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cc@MyLinux:~/vundle$ du -s</div><div class=\"line\">1328\t.</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>du -sh</code><br>以人类的角度直观的显示总共的大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cc@MyLinux:~/vundle$ du -sh</div><div class=\"line\">1.3M\t.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["Linux"],"tags":["Linux命令"]},{"title":"每天一个Linux命令--scp","url":"https://1314cc.github.io/2017/02/28/everyday-linux-2/","content":"<h1 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h1><ul>\n<li>文件拷贝<ul>\n<li>本地文件拷贝到远程服务器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp  /home/cc/a.tar.gz  blackchen@192.168.0.110:/home/tmp/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>把本地<code>/home/cc</code>下的<code>a.tar.gz</code>拷贝到远程服务器<code>192.168.0.110</code> <code>blackchen</code>用户 <code>/home/tmp/</code>下</p>\n<ul>\n<li>拷贝远程服务器文件到本地<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp  blackchen@192.168.0.110:/home/*  ~/test/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>把<code>192.168.0.110</code> 下<code>blackchen</code> 用户中的家目录下的所有文件拷贝到本地家目录中test目录下</p>\n<ul>\n<li>目录拷贝<ul>\n<li>本地目录拷贝到远程服务器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp  /home/cc/test_dir  blackchen@192.168.0.110:/home/tmp/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>把本地<code>/home/cc</code>下的<code>test_dir</code>目录拷贝到远程服务器<code>192.168.0.110</code> <code>blackchen</code>用户 <code>/home/tmp/</code>下</p>\n<ul>\n<li>拷贝远程服务器目录到本地<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp  blackchen@192.168.0.110:/home/test_dir ~/test/</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>把<code>192.168.0.110</code> 下<code>blackchen</code> 用户中的家目录下的<code>test_dir</code>目录拷贝到本地家目录中test目录下</p>\n","categories":["Linux"],"tags":["Linux命令"]},{"title":"rm -rf 引发的'惨案'","url":"https://1314cc.github.io/2017/02/27/rm-rf事件/","content":"<h1 id=\"rm-rf-需永远警惕\"><a href=\"#rm-rf-需永远警惕\" class=\"headerlink\" title=\"rm -rf 需永远警惕\"></a>rm -rf 需永远警惕</h1><p>今日在测试环境修改代码,测试的时候,删除旧的日志文件(方便查看当前最新生成的日志),由于多个终端的切换,导致没有关注文件目录,直接在src目录下执行<code>rm -rf *</code>!!!,<br>真是一个悲惨的教训,上周的代码没有备份,也没有提交版本库(没有完成).</p>\n<p><strong>警惕 :</strong></p>\n<ul>\n<li>要时刻保持警惕,在执行一些无法逆转,容易产生不可预估的后果的命令时,一定要再三确认. </li>\n<li>要随时保持备份,保持第二方案,做好最坏的打算.</li>\n</ul>\n<hr>\n<p>解决方案：</p>\n<ul>\n<li>编写shell 脚本，使用<code>mv</code>命令代替<code>rm</code>命令。</li>\n</ul>\n<p>在用户家目录下复制到<code>~/.bashrc</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">alias rm=&apos;trash&apos;</div><div class=\"line\">alias rl=&apos;trash_ls&apos;</div><div class=\"line\">alias rr=&apos;trash_rm&apos;</div><div class=\"line\">alias rg=&apos;trash_log&apos;</div><div class=\"line\">alias realrm=&apos;/bin/rm&apos;</div><div class=\"line\"></div><div class=\"line\">#-------回收站</div><div class=\"line\">TrashHome=&quot;$&#123;HOME&#125;/.data/&quot;</div><div class=\"line\">TrashDir=&quot;$&#123;TrashHome&#125;rubbish/&quot;</div><div class=\"line\">TrashLog=&quot;$&#123;TrashHome&#125;Log&quot;</div><div class=\"line\"></div><div class=\"line\">trash()</div><div class=\"line\">&#123;</div><div class=\"line\">    mkdir -p $&#123;TrashDir&#125;</div><div class=\"line\"></div><div class=\"line\">#显示帮助提示</div><div class=\"line\">    if [[ $1 = &quot;&quot; ]];then </div><div class=\"line\">        echo &quot;[ rm ] ---- &apos;remove&apos; File Or Directory&quot;</div><div class=\"line\">        echo &quot;             eg : rm filename&quot;</div><div class=\"line\">        echo &quot;             eg : rm filename1 filename2 dirname ...&quot;</div><div class=\"line\">        echo &quot;[ rl ] : List trash directory file&quot;</div><div class=\"line\">        echo &quot;[ rr ] : Clean trash directory&quot;</div><div class=\"line\">        echo &quot;[ rg ] : Get Trash Log&quot;</div><div class=\"line\">        echo &quot;[ realrm ] : original rm!!&quot;</div><div class=\"line\">        echo &quot;&quot;</div><div class=\"line\">        echo &quot;This [ rm ] is [ mv ]!!&quot;</div><div class=\"line\">        echo &quot;The trash directory is [ $&#123;TrashDir&#125; ]&quot;</div><div class=\"line\">        echo &quot;The trash Log is [ $&#123;TrashLog&#125; ]&quot;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">#循环 ‘删除’ 传入文件 </div><div class=\"line\">    for i in $*</div><div class=\"line\">    do</div><div class=\"line\">        Dir=`pwd`</div><div class=\"line\">        DATETIME=`date +%Y%m%d%H%M%S</div><div class=\"line\">       fileName=`basename $i`</div><div class=\"line\">        filesize=`du -k $i | awk &apos;END&#123;print $1&#125;&apos;`</div><div class=\"line\">        mv $i $&#123;TrashDir&#125;/$&#123;fileName&#125;.$&#123;DATETIME&#125;</div><div class=\"line\">            #添加日志信息</div><div class=\"line\">        if [[ $? -eq 0 ]];then</div><div class=\"line\">            if [[ -d $&#123;TrashDir&#125;/$&#123;fileName&#125;.$&#123;DATETIME&#125; ]];</div><div class=\"line\">            then</div><div class=\"line\">                echo &quot;-d $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Success &quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            elif [[ -f $&#123;TrashDir&#125;/$&#123;fileName&#125;.$&#123;DATETIME&#125; ]];</div><div class=\"line\">            then</div><div class=\"line\">                echo &quot;-f $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Success &quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            else</div><div class=\"line\">                echo &quot;-- $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Success &quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            fi</div><div class=\"line\">        else</div><div class=\"line\">            if [[ -f  $&#123;TrashDir&#125;/$&#123;fileName&#125;.$&#123;DATETIME&#125; ]];</div><div class=\"line\">            then</div><div class=\"line\">                echo &quot;-f $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Failure&quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            elif [[ -d  $&#123;TrashDir&#125;/$&#123;fileName&#125;.$&#123;DATETIME&#125; ]];</div><div class=\"line\">            then</div><div class=\"line\">                echo &quot;-d $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Failure&quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            else</div><div class=\"line\">                echo &quot;-- $&#123;fileName&#125;  $&#123;Dir&#125;/ $&#123;filesize&#125;k `date +&apos;%Y-%m-%d-%H:%M:%S&apos;` Failure&quot; &gt;&gt; $&#123;TrashLog&#125;</div><div class=\"line\">            fi</div><div class=\"line\">        fi</div><div class=\"line\">    done</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#展示回收站内容</div><div class=\"line\">trash_ls()</div><div class=\"line\">&#123;</div><div class=\"line\">#ls -lt $TrashDir</div><div class=\"line\">    ls -lt --color $TrashDir| sort -s -k 1,1</div><div class=\"line\">    trashsize=`du -k $&#123;TrashDir&#125; | awk &apos;END&#123;print $1&#125;&apos;`</div><div class=\"line\">    echo &quot;回收站总大小: $&#123;trashsize&#125;k&quot; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#清空回收站内容</div><div class=\"line\">trash_rm()</div><div class=\"line\">&#123;</div><div class=\"line\">    read -p &quot;确定清空回收站吗(同时会删除回收站日志)?(y/n)&quot; action</div><div class=\"line\">    if [ $action = &quot;y&quot; ];then</div><div class=\"line\">        /bin/rm -rf $&#123;TrashDir&#125;*</div><div class=\"line\">        echo &quot;&quot;&gt;$&#123;TrashLog&#125;</div><div class=\"line\">    elif [ $action = &quot;Y&quot; ];then</div><div class=\"line\">        /bin/rm -rf $&#123;TrashDir&#125;</div><div class=\"line\">        echo &quot;&quot;&gt;$&#123;TrashLog&#125;</div><div class=\"line\">    fi</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#打印回收站日志</div><div class=\"line\">trash_log()</div><div class=\"line\">&#123;</div><div class=\"line\">    clear</div><div class=\"line\">    cat $&#123;TrashLog&#125;| awk &apos;BEGIN&#123;printf &quot;%-6s %-15s %-30s %-10s %-15s %-10s\\n&quot;,&quot;类型&quot;,&quot;文件名&quot;,&quot;原文件路径&quot;,&quot;文件大小&quot;,&quot;日期&quot;,&quot;删除状态&quot;;</div><div class=\"line\">    printf &quot;---------------------------------------------------------------------------------------------------------\\n&quot;&#125;</div><div class=\"line\">    &#123; printf &quot;%-*s %-*s %-*s %-*s %-*s %-*s\\n&quot;,6,$1,15,$2,40,$3,10,$4,20,$5,10,$6&#125;</div><div class=\"line\">    END &#123;printf &quot;---------------------------------------------------------------------------------------------------------\\n&quot;&#125;</div><div class=\"line\">    &apos;</div><div class=\"line\">&#125;</div><div class=\"line\">#--------end 回收站</div></pre></td></tr></table></figure>\n<p>保存退出后执行  <code>source .bashrc</code>,使修改立即生效</p>\n<p>下面是回收站命令：<br>直接执行<code>rm</code>可以显示提示</p>\n<blockquote>\n<p>rm 执行的是trash函数<br>rg 打印删除日志<br>rl  显示回收站内容<br>rr 清空回收站<br>realrm 真正的删除（原rm）</p>\n</blockquote>\n<hr>\n<p>如果想要定时清空回收站，可使用定时器</p>\n<ul>\n<li>添加用户的定时器<br><code>crontab -e</code> 打开定时器编辑文件，添加如下代码<br><code>0 0 */2 * * /bin/rm -rf /home/cc/.data/rubbish/*;echo &quot;&quot; &gt; /home/cc/.data/Log</code><br>每两天的0时0分执行 <code>/bin/rm -rf /home/cc/.data/rubbish/*;echo &quot;&quot; &gt; /home/cc/.data/Log</code>清空回收站和日志</li>\n</ul>\n","categories":["日记"],"tags":["Linux"]},{"title":"每天一个Linux命令--shell快捷键","url":"https://1314cc.github.io/2017/02/24/everyday-linux-1/","content":"<h1 id=\"shell-下快捷键\"><a href=\"#shell-下快捷键\" class=\"headerlink\" title=\"shell 下快捷键\"></a>shell 下快捷键</h1><h2 id=\"光标移动命令\"><a href=\"#光标移动命令\" class=\"headerlink\" title=\"光标移动命令\"></a>光标移动命令</h2><ul>\n<li>Ctrl + a<br>移动到行首</li>\n<li>Ctrl + e<br>移动到行尾</li>\n<li>Ctrl + f<br>向前移动</li>\n<li>Ctrl + b<br>向后移动</li>\n<li>Alt + f<br>按单词前移</li>\n<li><p>Alt + b<br>按单词后移</p>\n<h2 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h2></li>\n<li>Ctrl + u<br>从光标处删除至命令行首</li>\n<li>Ctrl + k<br>从光标处删除至行尾</li>\n<li>Ctrl + w<br>从光标删除至字首</li>\n<li>Ctrl + d<br>删除光标处的字符</li>\n<li><p>Ctrl + h<br>删除光标前的字符</p>\n<h2 id=\"重新显示命令\"><a href=\"#重新显示命令\" class=\"headerlink\" title=\"重新显示命令\"></a>重新显示命令</h2></li>\n<li>Ctrl + r<br>逆向搜索命令历史</li>\n<li>Ctrl + g<br>退出搜索模式</li>\n<li>Ctrl + p<br>显示上一条命令</li>\n<li><p>Ctrl + n<br>显示下一条命令</p>\n<h2 id=\"控制命令\"><a href=\"#控制命令\" class=\"headerlink\" title=\"控制命令\"></a>控制命令</h2></li>\n<li>Ctrl + l(L)<br>清屏</li>\n<li>Ctrl + s<br>阻止屏幕输出</li>\n<li>Ctrl + q<br>允许屏幕输出</li>\n<li>Ctrl + c<br>终止命令</li>\n</ul>\n","categories":["Linux"],"tags":["Linux命令"]},{"title":"服务器编程框架","url":"https://1314cc.github.io/2017/02/21/Server-Code/","content":"<h1 id=\"服务器编程框架\"><a href=\"#服务器编程框架\" class=\"headerlink\" title=\"服务器编程框架\"></a>服务器编程框架</h1><h2 id=\"两种高效的事件处理模式\"><a href=\"#两种高效的事件处理模式\" class=\"headerlink\" title=\"两种高效的事件处理模式\"></a>两种高效的事件处理模式</h2><p> 同步I/O模型通常用于实现<code>Reactor</code>,异步I/O模式则用于实现<code>Proactor</code>模式,不过用同步I/O方式,也可以模拟出<code>Proactor</code> 模式</p>\n<h3 id=\"Reactor\"><a href=\"#Reactor\" class=\"headerlink\" title=\"Reactor\"></a>Reactor</h3><p><code>Reactor</code>,要求主线程,只负责监听文件描述符上是否有事件发生,有的话就立即将该时间通知工作线程,除此之外,主线程不做任何其他实质性的工作,读写数据,接受新链接,以及处理客户请求均在工作线程中完成.</p>\n<p><strong>工作流程:</strong></p>\n<ul>\n<li>主线程往<code>epoll</code>内核事件表中注册socket上的<code>读</code>就绪事件.</li>\n<li>主线程调用<code>epoll_wait</code>等待socket上有数据可读.</li>\n<li>当socket上有数据可读时,<code>epoll_wait</code>通知主线程,主线程则将socket可读事件放入请求队列.</li>\n<li>睡眠在请求队列上的某个工作线程被唤醒,它从socket中读取数据,并处理客户请求,然后往epoll内核事件表中注册该socket上的写就绪事件.</li>\n<li>主线程调用epoll_wait等待socket可写.</li>\n<li>当socket可写时,<code>epoll_wait</code>通知主线程,主线程将socket可写事件放入请求队列.</li>\n<li>睡眠在请求队列上的某个工作线程被唤醒,它往socket上写入服务器处理客户请求的结果.</li>\n</ul>\n<h3 id=\"Proactor\"><a href=\"#Proactor\" class=\"headerlink\" title=\"Proactor\"></a>Proactor</h3><p><strong>与Reactor模式不同,Proactor将所有的I/O操作都交给主线程和内核来处理,工作线程仅仅负责业务逻辑.</strong></p>\n<p>使用异步I/O模型(以<code>aio_read 和 aio_write</code>为例)</p>\n<p><strong>工作流程:</strong></p>\n<ul>\n<li>主线程调用<code>aio_read</code>函数想内核注册socket上的<strong>读完成</strong>事件,并告诉内核用户读缓冲区的位置,以及读操作完成后如何通知应用程序(以信号为例)</li>\n<li>主线程继续处理其他逻辑</li>\n<li>当socket上的数据被读入用户缓冲区后,内核将向应用程序发送一个信号,以通知应用程序数据可用.</li>\n<li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求.工作线程处理完客户请求之后,调用<code>aio_write</code>函数向内核注册socket上的写完成事件,并告诉内核用户写缓冲区的位置,以及写操作完完成时如何通知应用程序.</li>\n<li>主线程继续处理其他逻辑.</li>\n<li>当用户缓冲区的数据被写入socket中后,内核将向应用程序发送一个信号,以通知应用程序数据已经发送完毕.</li>\n<li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理,比如决定是否关闭socket.</li>\n</ul>\n<h3 id=\"Reactor与Proactor-总结\"><a href=\"#Reactor与Proactor-总结\" class=\"headerlink\" title=\"Reactor与Proactor 总结:\"></a>Reactor与Proactor 总结:</h3><p>Proactor将所有的I/O操作交给主线程和内核来处理,工作线程只是负责业务处理, Reactor是通知的是<strong>可读可写</strong>,而Proactor是通知<strong>读完成</strong>和<strong>写完成</strong></p>\n<h2 id=\"两种高效的并发模式\"><a href=\"#两种高效的并发模式\" class=\"headerlink\" title=\"两种高效的并发模式\"></a>两种高效的并发模式</h2><p>并发编程的目的是让程序”同时”执行多个任务. 如果程序是计算密集型的,并发编程并没有优势,反而由于任务的切换而效率降低. 但是如果程序是I/O密集型的,比如经常读写文件,访问数据库等,则情况就不同了. 由于I/O的速度远远没有CPUs计算速度快,所以让程序阻塞与I/O操作将浪费大量的CPU时间.如果程序有多个执行线程.则当前被I/O操作所阻塞的执行线程可主动放弃CPU,并将执行权限转移到其他线程,这样一来,CPU可用来做更加有意义的事情,而不是等待I/O操作完成,因此CPU的利用率明显上升.<br><strong> 并发模式:</strong></p>\n<ul>\n<li>半同步/半异步 模式</li>\n<li>领导者/追随者 模式<h3 id=\"半同步-半异步模式\"><a href=\"#半同步-半异步模式\" class=\"headerlink\" title=\"半同步/半异步模式\"></a>半同步/半异步模式</h3><blockquote>\n<p>此时的同步异步,和I/O模型中的同步.异步是不同的概念. 在I/O模型中,”同步”和”异步”区分的是内核向应用程序通知的是何种I/O事件(<code>就绪事件 和 完成事件</code>),已经该由谁来完成I/O读写(<code>应用程序还是内核</code>). 在并发模式中,”同步”指定是程序完全<code>按照代码序列的顺序执行</code>;”异步”指的是程序的<code>执行需要由系统事件来驱动</code>. 常见的系统事件包括中断,信号等.</p>\n</blockquote>\n</li>\n</ul>\n<p>半同步/半异步模式中,同步线程用于处理客户逻辑;异步线程用于处理处理I/O事件. 异步线程监听到客户请求之后,就将其封装成请求对象并插入请求队列当中.请求队列将通知某个工作在同步模式的工作线程来读取并处理该请求对象.</p>\n<h4 id=\"半同步-半反应堆模式\"><a href=\"#半同步-半反应堆模式\" class=\"headerlink\" title=\"半同步/半反应堆模式\"></a>半同步/半反应堆模式</h4><p>这种模式是结合两种事件处理方式(Reactor,Proactor)和几种I/O模型模型变体中的一种.<br>异步线程只有一个,线程充当,他负责监听所有SOCKET上的事件.如果监听socket上有可读事件,即有新的链接过来,主线程就接收之以得到新的链接socket,然后往epoll内核事件表中注册该socket上的读写事件,如果链接socket上有读写事件发生,即有新的客户请求到来或这有数据要发送到客户端,主线程就将该链接socket插入请求队列中.所有的工作线程都睡眠在请求队列上,当有任务到来时,他们通过竞争获得任务接管权.</p>\n<blockquote>\n<p>缺点:</p>\n<ol>\n<li>主线程和工作线程共享请求队列.主线程往请求队列中添加任务,或者工作线程从请求队里中取任务,都要<strong>加锁保护</strong>,白白浪费CPU时间.</li>\n<li>每个工作线程同一时间只能处理一个任务,如果客户请求较多,而工作线程较少,则请求队列中堆积很多任务对象,客户端响应越来越慢,如果增加工作线程,则工作线程的切换也白白浪费CPU时间.</li>\n</ol>\n</blockquote>\n<h4 id=\"高效的半同步-半异步模式\"><a href=\"#高效的半同步-半异步模式\" class=\"headerlink\" title=\"高效的半同步/半异步模式\"></a>高效的半同步/半异步模式</h4><p>主线程监听socket,链接socket由工作线程来管理.当有新的链接到来时,主线程接受并将返回的链接socket派发给某个工作线程,此后该新socket上的任何I/O操作都由被选中的工作线程来处理,知道客户关闭链接.主线程向工作线程派发socket使用<strong>管道</strong>,工作线程检测管道上有数据可读时,判断是否是新的客户链接请求,如果是,则把该新的socket上的读写时间注册到自己的epoll内核事件表中.<br><img src=\"http://olmfaph6j.bkt.clouddn.com/%E9%AB%98%E6%95%88%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F.png\" alt=\"高效的半同步/半异步模式\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><ol>\n<li>半同步/半异步 与 I/O模型中的同步异步是不同概念.</li>\n<li>半同步/半反应堆</li>\n<li>高效的半同步半异步 – 主线程和工作线程分别有自己的epoll内核事件,分别处理链接和读写.</li>\n</ol>\n<h3 id=\"领导者-追随者模式\"><a href=\"#领导者-追随者模式\" class=\"headerlink\" title=\"领导者/追随者模式\"></a>领导者/追随者模式</h3><p>领导者/追随者模式是多个工作线程轮流获得事件源集合,轮流监听,分发并处理事件的一种模式.在任一时间点,程序都仅有一个领导者线程,他负责监听I/O事件,而其他线程都是追随者,他们休眠在线程池中等待成为新的领导者.当当前的领导者如果检测到IO事件,首先要从线程池中推选出新的领导者线程,然后处理I/O事件. 此时新的领导者等待新的I/O事件,而原来的领导者处理I/O事件,二者实现了并发.</p>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><p><a href=\"http://blog.csdn.net/lmh12506/article/details/7753978\" target=\"_blank\" rel=\"external\">几种经典的服务器模型框架比较</a><br><a href=\"http://blog.csdn.net/u013074465/article/details/46276967\" target=\"_blank\" rel=\"external\">两种高效的服务器设计模型：Reactor和Proactor模型</a></p>\n","categories":["服务器编程"],"tags":["服务器","高并发"]},{"title":"Hexo 常用命令","url":"https://1314cc.github.io/2017/02/19/Hexo-setting/","content":"<blockquote>\n<p><em>总有一片风景属于你</em></p>\n</blockquote>\n<p><img src=\"http://olmfaph6j.bkt.clouddn.com/70219211125.png\" alt=\"\"></p>\n<h1 id=\"Hexo-配置与常用命令\"><a href=\"#Hexo-配置与常用命令\" class=\"headerlink\" title=\"Hexo  配置与常用命令\"></a>Hexo  配置与常用命令</h1><h1 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h1><ul>\n<li>初始化<br>  <code>hexo init dirname</code></li>\n<li><p>新建文章<br>  <code>hexo n &quot;myblog&quot;  == hexo new &quot;myblog&quot;</code></p>\n</li>\n<li><p>新建草稿<br>  <code>hexo new draft &quot; new_draft&quot;</code><br>  草稿在使用<code>hexo g</code>的时候并不发布</p>\n</li>\n<li>发布草稿<br>  <code>hexo publish &quot;new_draft&quot;</code></li>\n<li>生成网页<br>  <code>hexo g   == hexo generate</code></li>\n<li>启动服务器预览<br>  <code>hexo  s == hexo server</code></li>\n<li>部署到git<br>  <code>hexo d == hexo deploy</code></li>\n<li>清除缓存<br>  <code>hexo clean</code></li>\n</ul>\n<h1 id=\"hexo-文章属性\"><a href=\"#hexo-文章属性\" class=\"headerlink\" title=\"hexo 文章属性\"></a>hexo 文章属性</h1><p>文章生成默认使用blog/scaffolds/post.md 中的配置</p>\n<ul>\n<li>title :</li>\n<li>date :</li>\n<li>tags : [ C++ , LINUX] ##标签</li>\n<li>category : [ 编程 ] ##分类</li>\n<li>comments :<br>注! <strong>冒号后面有空格</strong> </li>\n</ul>\n<p><img src=\"http://olmfaph6j.bkt.clouddn.com/A395.tmp.png\" alt=\"文章属性配置\"></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>写文章时,<code>&lt;!**more**&gt;</code> 之上为摘要</p>\n","categories":["Blog"],"tags":["Hexo"]},{"title":"about","url":"https://1314cc.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://1314cc.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://1314cc.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://1314cc.github.io/tag/index.html","content":"","categories":[],"tags":[]}]