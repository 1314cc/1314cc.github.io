[{"title":"服务器编程框架","url":"https://1314cc.github.io/2017/02/21/Server-Code/","content":"<h1 id=\"服务器编程框架\"><a href=\"#服务器编程框架\" class=\"headerlink\" title=\"服务器编程框架\"></a>服务器编程框架</h1><h2 id=\"两种高效的时间处理模式\"><a href=\"#两种高效的时间处理模式\" class=\"headerlink\" title=\"两种高效的时间处理模式\"></a>两种高效的时间处理模式</h2><p> 同步I/O模型通常用于实现<code>Reactor</code>,异步I/O模式则用于实现<code>Proactor</code>模式,不过用同步I/O方式,也可以模拟出<code>Proactor</code> 模式</p>\n<h3 id=\"Reactor\"><a href=\"#Reactor\" class=\"headerlink\" title=\"Reactor\"></a>Reactor</h3><p><code>Reactor</code>,要求主线程,只负责监听文件描述符上是否有事件发生,有的话就立即将该时间通知工作线程,除此之外,主线程不做任何其他实质性的工作,读写数据,接受新链接,以及处理客户请求均在工作线程中完成.</p>\n<p><strong>工作流程:</strong></p>\n<ul>\n<li>主线程往<code>epoll</code>内核事件表中注册socket上的<code>读</code>就绪事件.</li>\n<li>主线程调用<code>epoll_wait</code>等待socket上有数据可读.</li>\n<li>当socket上有数据可读时,<code>epoll_wait</code>通知主线程,主线程则将socket可读事件放入请求队列.</li>\n<li>睡眠在请求队列上的某个工作线程被唤醒,它从socket中读取数据,并处理客户请求,然后往epoll内核事件表中注册该socket上的写就绪事件.</li>\n<li>主线程调用epoll_wait等待socket可写.</li>\n<li>当socket可写时,<code>epoll_wait</code>通知主线程,主线程将socket可写事件放入请求队列.</li>\n<li>睡眠在请求队列上的某个工作线程被唤醒,它往socket上写入服务器处理客户请求的结果.</li>\n</ul>\n<h3 id=\"Proactor\"><a href=\"#Proactor\" class=\"headerlink\" title=\"Proactor\"></a>Proactor</h3><p><strong>与Reactor模式不同,Proactor将所有的I/O操作都交给主线程和内核来处理,工作线程仅仅负责业务逻辑.</strong></p>\n<p>使用异步I/O模型(以<code>aio_read 和 aio_write</code>为例)</p>\n<p><strong>工作流程:</strong></p>\n<ul>\n<li>主线程调用<code>aio_read</code>函数想内核注册socket上的<strong>读完成</strong>事件,并告诉内核用户读缓冲区的位置,以及读操作完成后如何通知应用程序(以信号为例)</li>\n<li>主线程继续处理其他逻辑</li>\n<li>当socket上的数据被读入用户缓冲区后,内核将向应用程序发送一个信号,以通知应用程序数据可用.</li>\n<li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求.工作线程处理完客户请求之后,调用<code>aio_write</code>函数向内核注册socket上的写完成事件,并告诉内核用户写缓冲区的位置,以及写操作完完成时如何通知应用程序.</li>\n<li>主线程继续处理其他逻辑.</li>\n<li>当用户缓冲区的数据被写入socket中后,内核将向应用程序发送一个信号,以通知应用程序数据已经发送完毕.</li>\n<li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理,比如决定是否关闭socket.</li>\n</ul>\n<h3 id=\"Reactor与Proactor-总结\"><a href=\"#Reactor与Proactor-总结\" class=\"headerlink\" title=\"Reactor与Proactor 总结:\"></a>Reactor与Proactor 总结:</h3><p>Proactor将所有的I/O操作交给主线程和内核来处理,工作线程只是负责业务处理, Reactor是通知的是<strong>可读可写</strong>,而Proactor是通知<strong>读完成</strong>和<strong>写完成</strong></p>\n","categories":["服务器编程"],"tags":["服务器","高并发"]},{"title":"Hexo 常用命令","url":"https://1314cc.github.io/2017/02/19/Hexo-setting/","content":"<blockquote>\n<p><em>总有一片风景属于你</em></p>\n</blockquote>\n<p><img src=\"http://olmfaph6j.bkt.clouddn.com/70219211125.png\" alt=\"\"></p>\n<h1 id=\"Hexo-配置与常用命令\"><a href=\"#Hexo-配置与常用命令\" class=\"headerlink\" title=\"Hexo  配置与常用命令\"></a>Hexo  配置与常用命令</h1><h1 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h1><ul>\n<li>初始化<br>  <code>hexo init dirname</code></li>\n<li><p>新建文章<br>  <code>hexo n &quot;myblog&quot;  == hexo new &quot;myblog&quot;</code></p>\n</li>\n<li><p>新建草稿<br>  <code>hexo new draft &quot; new_draft&quot;</code><br>  草稿在使用<code>hexo g</code>的时候并不发布</p>\n</li>\n<li>发布草稿<br>  <code>hexo publish &quot;new_draft&quot;</code></li>\n<li>生成网页<br>  <code>hexo g   == hexo generate</code></li>\n<li>启动服务器预览<br>  <code>hexo  s == hexo server</code></li>\n<li>部署到git<br>  <code>hexo d == hexo deploy</code></li>\n<li>清除缓存<br>  <code>hexo clean</code></li>\n</ul>\n<h1 id=\"hexo-文章属性\"><a href=\"#hexo-文章属性\" class=\"headerlink\" title=\"hexo 文章属性\"></a>hexo 文章属性</h1><p>文章生成默认使用blog/scaffolds/post.md 中的配置</p>\n<ul>\n<li>title :</li>\n<li>date :</li>\n<li>tags : [ C++ , LINUX] ##标签</li>\n<li>category : [ 编程 ] ##分类</li>\n<li>comments :<br>注! <strong>冒号后面有空格</strong> </li>\n</ul>\n<p><img src=\"http://olmfaph6j.bkt.clouddn.com/A395.tmp.png\" alt=\"文章属性配置\"></p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>写文章时,<code>&lt;!**more**&gt;</code> 之上为摘要</p>\n","categories":["Blog"],"tags":["Hexo"]},{"title":"about","url":"https://1314cc.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://1314cc.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://1314cc.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://1314cc.github.io/tag/index.html","content":"","categories":[],"tags":[]}]